VERSÃO 1.3
Ficheiro: social_bd.sql
URL: https://github.com/elisabetecosta/projeto-rede_social/blob/main/social_bd.sql
Data: 03/09/2022

CONSIDERAÇÕES:
1) Houve a necessidade de criar duas tabelas para os utilizadores: uma tem os dados essenciais à gestão da base de dados (t_users), outra tem informação suplementar que pode ser facilmente personalizada pelo utilizador (t_perfis)
2) Uma rede social poderá ter milhões de utilizadores, posts e comentários, razão pela qual o ID de cada uma destas tabelas está definido como DOUBLE ao invés de INT.
3) Todos os campos estão definidos como NOT NULL, à excepção das fotos na tabela t_posts.
4)  A tabela t_privado define se um post está público ou se está visível para todos os utilizadores. Não diz respeito à privacidade dos dados do utilizador em si mesmos.


==================================================
                 TABELA   t_users
==================================================
    id_user       DOUBLE(sem limite)  PK  AI   NOT NULL
                  Uma rede social poderá ter milhões de utilizadores, razão pela qual o ID está definido como DOUBLE ao invés de INT.
                
    handle_user   VARCHAR(15)  NOT NULL 
                  Este campo diz respeito ao @nomeUnico do utilizador que está visível para todos verem.
                
    email         VARCHAR(50)  NOT NULL
                  Endereço de email usado pelo utilizador para se registar na rede social, não será visivel publicamente
                
    password      VARCHAR(255)  NOT NULL
                  Tem tamanho 255 porque será encriptada com uma função de encriptação em PHP

    status_user   TINYINT(2)   NOT NULL
                  Valor por defeito: 0
                  0 = O utilizador está activo e o perfil é visível
                  1 = O utilizador eliminou a própria conta              
                  2 = O utilizador foi banido: Incitação à violência ou discurso de ódio
                  3 = O utilizador foi banido: Racismo
                  4 = O utilizador foi banido: Publicidade ou SPAM

    regis_date    DATETIME   NOT NULL
                  Contém a data e hora exactas em que o utilizador registou-se no site e criou conta. Útil para implementar funcionalidades futuras.

    type_user     TINYINT(2)   NOT NULL
                  Valor por defeito: 0
                  0 = Utilizador comum
                  1 = Moderador de comentários
                  2 = Administrador
                
    obs_mod       VARCHAR(255) NULL
                  Este campo é preenchido pela moderação com observações importantes sobre o utilizador, caso ele tenha um histório de comportamento questionável.
                  Caso seja banido, esta caixa de texto documentará com mais detalhe a situação. Isto facilita também a recuperação de contas.

==================================================
                 TABELA   t_profiles
==================================================
    id_profile    DOUBLE(sem limite)  PK  AI   NOT NULL
                  Uma rede social poderá ter milhões de utilizadores, razão pela qual o ID de perfil está definido como DOUBLE ao invés de INT.

    id_user       DOUBLE(sem limite)  FK  NOT NULL
                  Chave estrangeira, recebe os dados vindos da chave primária da tabela t_users.

    nickname      VARCHAR(45)   NOT NULL
                  Nickname público do utilizador que aparece em letras maiores no perfil.
                  Difere do @handle na medida em que pode ser personalizado pelo utilizador.
                  Aparece geralmente ao lado ou por cima do @handle

    avatar_pic    VARCHAR(300)  NOT NULL 
                  Aqui estará escrito o directório onde está a ser guardada a imagem (ex.: users/pedro/imagens/perfil.png)
                  É NOT NULL porque se o utilizador não colocar uma imagem personalizada, o valor predefinido será uma imagem default (ex.: users/foto_perfil_default.png)
                
    banner_pic    VARCHAR(300)  NOT NULL 
                  Aqui estará escrito o directório onde está a ser guardada a imagem da capa (ex.: users/pedro/imagens/capa.png)
                  É NOT NULL porque se o utilizador não colocar uma imagem personalizada, o valor predefinido será uma imagem default (ex.: users/img_capa_default.png)

    genre        CHAR(45)
                  Valor por defeito: Indeterminado
                  Masculino, Feminino, Indeterminado

    birthdate     DATE   NOT NULL
                  Data de nascimento do utilizador. É importante definir como campo obrigatório de preencher, para não aceitar menores de idade no site.

    profile_title VARCHAR(20)   NOT NULL
                  Valor por defeito: "Sobre mim"
                  Título da caixa de texto onde o utilizador pode escrever sobre os seus interesses e quem é.

    perfil_desc   VARCHAR(255)   NOT NULL
                  Caixa de texto com uma breve descrição do utilizador, seus interesses ou qualquer coisa que deseje ver no perfil em formato de texto.
                  Naturalmente, pode ser personalizado pelo utilizador em qualquer altura.

    last_updated  DATETIME
                  Data e hora da última actualização dos dados do perfil efectuada pelo utilizador. Só aparece ao utilizador, quando vai editar.
                  Recebe a data actual a partir do momento que o utilizador clica em "submit" e envia os novos dados.

=============================================================================
                 TABELA   t_posts
=============================================================================
    id_post       DOUBLE(sem limite)  PK  AI   NOT NULL
                  Uma rede social poderá ter milhões de posts, razão pela qual o ID está definido como DOUBLE ao invés de INT.
                  
    id_user       DOUBLE(sem limite)  FK  NOT NULL
                  Chave estrangeira proveniente da tabela t_users
                  Identifica qual dos utilizadores da tabela t_user publicou o post.
                  
    text         VARCHAR(255)
                  Cada post tem um limite de caracteres de 255.
                  ATENÇÃO: Só texto. Não inclui smileys ou emoticons.
                  Pode haver necessidade de mudar isto no futuro, se realmente quisermos que os utilizadores usem o site para partilhar código.
                                    
    status_post   TINYINT(2)  NOT NULL
                  Valor por defeito: 0
                  0 = Este post está activo
                  1 = Post apagado pelo autor do post              
                  2 = Post apagado pela moderação: Incitação à violência ou discurso de ódio
                  3 = Post apagado pela moderação: Racismo
                  4 = Post apagado pela moderação: Publicidade ou SPAM

    private      TINYINT(2)  NOT NULL
                 Valor por defeito: 0
                 0 = O post é público
                 1 = O post é privado
                     Define-se quais são os utilizadores que podem ver os posts, estabelecendo uma relação entre as tabelas t_posts e t_privado (usar SELECT DISTINCT e JOIN)
                     Exemplo prático: https://stackoverflow.com/questions/14449023/mysql-private-posts-display


    publish_date DATETIME   NOT NULL
                 Data e hora da publicação do post. Recebe a hora actual quando o utilizador clica em "submit" e envia os dados que preencheu no formulário.
                 
=============================================================================
                 TABELA   id_comments
=============================================================================
    id_comment    DOUBLE(sem limite)  PK  AI   NOT NULL
                  Uma rede social poderá ter milhões de posts, razão pela qual o ID está definido como DOUBLE ao invés de INT.
                  
    id_author     DOUBLE(sem limite)  FK  NOT NULL
                  Chave estrangeira proveniente da tabela t_users
                  Identifica qual dos utilizadores da tabela t_user publicou o comentário. 
                  
    id_post       DOUBLE(sem limite)  FK  NOT NULL
                  Chave estrangeira proveniente da tabela t_posts
                  Identifica o post a que o comentário diz respeito.
                  
    text_comment  VARCHAR(255)	 NOT NULL
                  Corpo do comentário em formato de texto.
                  ATENÇÃO: Só texto. Não inclui smileys ou emoticons.
                   
    status_comment TINYINT(2)  NOT NULL
                  Valor por defeito: 0
                  0 = O comentário está activo
                  1 = Comentário apagado pelo autor do post              
                  2 = Comentário apagado: Incitação à violência ou discurso de ódio
                  3 = Comentário apagado: Racismo
                  4 = Comentário apagado: Publicidade ou SPAM

    publish_date DATETIME   NOT NULL
                 Data e hora da publicação do comentário. Recebe a hora actual quando o utilizador clica em "submit" e envia os dados que preencheu no formulário.


=============================================================================
                 TABELA   t_media  (para imagens, links, links para videos, e para ficheiros de texto (código)
=============================================================================
   
   id_media      DOUBLE   PK  AI  NOT NULL
                 Identifica a média

   id_post       DOUBLE   FK  AI  NOT NULL
                 Chave estrangeira que identifica o post a que a média está vinculada (id da tabela t_posts)

   type 	 ENUM('vid', 'pic', 'lnk', 'txt')
 		 Este campo serve para esclarecer se o tipo de média consiste num video, imagem, link, ou texto.
		 A partir do momento que o utilizador clica no botão submit e diz que adicionar uma imagem ao post, o botão imediatamente preenche este campo com a opção "pic".
                 vid = video
                 pic = imagem
                 lnk = link
                 txt = texto ou código

    media        VARCHAR(255)  NOT NULL
		 Se for tipo 'vid' = este campo guarda o URL do video para o youtube ou dailymotion
		 Se for tipo 'pic' = este campo guarda o directório onde estará guardada a imagem que o utilizador carregou no formulário, ao clicar em "submit". (exemplo:  "pedro123/galery/foto1.png")
		 Se for tipo 'lnk' = este campo guarda o URL da página de internet colocada pelo utilizador no formulário
                 Se for tipo 'txt' = este campo guarda o directório onde estará guardado o ficheiro de texto (código) (exemplo:  "pedro123/codes/codigo.txt")

   estatus      TINYINT(11)  NOT NULL
                Valor por defeito: 0
                  0 = A média está visivel e aceite
                  1 = Média apagada pelo autor do post              
                  2 = Média apagada: Pornografia ou conteúdo impróprio
                  3 = Média apagada: Direitos de Autor reivindicados por terceiros.
		  4 = Média apagada: Racismo, descriminação ou discurso de ódio

=============================================================================
                 TABELA   t_favs  
=============================================================================


    id_fav       DOUBLE(Sem limite)   PK  AI  NOT NULL
                 Cada post tem o seu próprio botão de "favorito".

    id_user  DOUBLE  FK  NOT NULL
                 Chave estrangeira que identifica o utilizador que favoritou o post. Recebe os dados da chave primária da tabela t_users.

    id_post      DOUBLE  FK  NOT NULL
                 Chave estrangeira que identifica o post a que o favorito diz respeito. Recebe os dados da chave primária da tabela t_posts.

    status_fav   TINYINT(2)
                 Valor por defeito: 0 (não favoritado)
                 0 = Não favoritado
                 1 = Favoritado

    date_fav     DATETIME
                 Data e hora em que o valor do status_fav passou a 1.
                 Isto é relevante para para mostrar nas notificações do utilizador quando ele recebeu o Favorito.
                 
=============================================================================
                 TABELA   t_private
=============================================================================

    id_private   DOUBLE (sem limite)  PK  AI  NOT NULL
                 Identifica a relação

    id_post      DOUBLE  FK  NOT NULL
                 Chave estrangeira que identifica o post (recebe da tabela t_posts o id do post)

id_authorized_user  DOUBLE  FK   NOT NULL
                 Chave estrangeira que identifica o utilizador que pode ver o post (recebe da tabela t_users o id do utilizador)


                     Define-se quais são os utilizadores que podem ver os posts, estabelecendo uma relação entre as tabelas t_posts e t_privado (usar SELECT DISTINCT e JOIN)
                     Exemplo prático: https://stackoverflow.com/questions/14449023/mysql-private-posts-display
